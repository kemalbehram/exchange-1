<?php
//Controller For Wallet The Exchange Can Delete This Controllerldh
namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Models\{Currency, AccountLog, Users, UsersWallet};
use App\Utils\RPC;

class WalletOneController extends Controller
{
    public function add()
    {
        $user_id = Users::getUserId();
        // $token =request()->input("token",'');
        $memorizing_words = request()->input("memorizing_words", "");
        $erc_address = request()->input("address", "");
        $btc_address = request()->input("contentbtc", "");
        // $wallet_name =request()->input("wallet_name","");
        $password_prompt = request()->input("password_prompt", "");
        $password = request()->input("password", "");
        if ($password != $password_prompt) {
            return $this->error('The Two Passwords Are Inconsistent');
        }

        if (empty($user_id) || empty($memorizing_words) || empty($erc_address) || empty($password)) return $this->error("Parameter Error");

        $user = Users::find($user_id);
        if (empty($user)) return $this->error("User Not Found");

        $waller = UsersWallet::where("user_id", $user_id)->first();
        if ($waller) return $this->error("Wallet Added,Please Do Not Add It Repeatedly");
        // $currency = Currency::all()->toArray();
        DB::beginTransaction();
        try {
            $currency = Currency::all();
            $user->pay_password =  $password;
            $user->memorizing_words =  $memorizing_words;
            $user->save();
            // $address_url = config('wallet_api') . $user->id;
            $address_url = 'http://47.75.32.159:3000/word/getaddress_mll?password=swl910101&user_id=' . $user->id;
            $address = RPC::apihttp($address_url);
            $address = @json_decode($address, true);
            // return $address_url;
            foreach ($currency as $key => $value) {
                $userWallet = new UsersWallet();
                $userWallet->user_id = $user->id;
                if ($value->type == 'btc') {
                    $userWallet->address = $address["contentbtc"];
                    $userWallet->eth_address = $erc_address;
                } else {
                    $userWallet->eth_address = $btc_address;
                    $userWallet->address = $address["content"];
                }
                $userWallet->currency = $value->id;
                // $userWallet->memorizing_words = $memorizing_words;

                // $userWallet->address = $address;
                // $userWallet->password =
                $userWallet->create_time = time();
                $userWallet->save(); //All Currency Wallets Are Generated By Default
            }
            DB::commit();
            return $this->success("Added Successfully");
        } catch (\Exception $ex) {
            DB::rollBack();
            return $this->error($ex->getMessage());
        }
    }
    //How To Transfer Wallet To Exchange
    //1111Operation Of Wallet
    public function ltcSend(Request $request)
    {
        $address = $request->input('address', '');
        $money = $request->input('money', '');
        $password = $request->input('password', '');
        $password = $request->input('currency_id', '');
        $user_id = Users::getUserId(request()->input("user_id"));
        $user = Users::find($user_id);
        $wallet = UsersWallet::where('user_id', $user_id)->first();
        if (empty($address) || empty($money) || $money < 0 || empty($wallet)) {
            return $this->error('Parameter Error');
        }
        if ($wallet->password != $password) {
            return $this->error('Payment Password Error');
        }
        $userWallet = UsersWallet::where('user_id',$user_id)->where('token','PB')->first();
        if ($money > $userWallet->balance) {
            return $this->error('Sorry, Your Credit Is Running Low');
        }
        // $user = Users::find($user_id);

        // $key = md5(time());
        $set_url = Settings::getValueByKey('send_url', '');
        if (empty($set_url)) {
            return $this->error('Parameter Error');
        }
        DB::beginTransaction();
        try {
            $userWallet->change_balance =  $userWallet->change_balance - $money;
            $userWallet->save();
            AccountLog::insertLog([
                'user_id' => $user_id,
                'value' => $money,
                'info' => 'Transfer To Exchange Wallet',
                'type' => AccountLog::LTC_SEND
            ]);

            $url = $set_url . "/api/getLtcKMB?address=" . $address . "&money=" . $money;
            $data = RPC::apihttp($url);
            $data = @json_decode($data, true);
            if ($data["type"] != 'ok') {
                DB::rollBack();
                return $this->error($data["message"]);
            }
            DB::commit();
            return $this->success('Transfer Successful');
        } catch (\Exception $rex) {
            DB::rollBack();

            return $this->error($rex);
        }
    }

    //Receive Balance From Exchange
    public function ltcGet(Request $request)
    {
        $account_number = $request->input('account_number', '');
        $money = $request->input('money', '');
        $user = Users::where('account_number', $account_number)->first();
        if (empty($user)) return $this->error('User Not Found');
        $userWallet = UsersWallet::where('user_id', $user->id)->first();
        if (empty($userWallet)) return $this->error('User Wallet Not Found');
        DB::beginTransaction();
        try {
            $userWallet->balance =  $userWallet->balance + $money;
            $userWallet->save();
            AccountLog::insertLog([
                'user_id' => $user->id,
                'value' => $money,
                'info' => 'Receive Transfer From Exchange',
                'type' => AccountLog::LTC_IN
            ]);
            DB::commit();
            return $this->success('Transfer Successful');
        } catch (\Exception $rex) {
            DB::rollBack();

            return $this->error($rex);
        }
    }

    //Wallet List
    public function walletList()
    {
        $user_id = Users::getUserId();
        $currency = Currency::where('is_display', 1)->orderBy('sort', 'asc')->get();
        $userWallet = UsersWallet::where('user_id', $user_id)->first();
        if (empty($userWallet)) {
            return $this->error('You Dont Have A Wallet Yet');
        }
        $list = [];
        $total_cny = 0;
        foreach ($currency as $k => $v) {
            $list[$k]['id'] = $v->id;
            $list[$k]['name'] = $v->name;
            $list[$k]['logo'] = $v->logo;
            $wallet = UsersWallet::where('user_id', $user_id)->where('currency', $v->id)->first();
            if (!empty($wallet)) {
                $cny_price = Currency::getCnyPrice($v->id);
                // $list[$k]['cny_price'] = $cny_price;
                $list[$k]['balance'] = $wallet->change_balance;
                $list[$k]['lock_balance'] = $wallet->lock_change_balance;
                $list[$k]['cny_balance'] = bc_add($wallet->change_balance, $wallet->lock_change_balance, 5) * $cny_price;
                $total_cny += $list[$k]['cny_balance'];
            } else {
                $list[$k]['balance'] = 0;
                $list[$k]['lock_balance'] = 0;
                $list[$k]['cny_balance'] = bc_add($wallet->change_balance, $wallet->lock_change_balance, 5) * $cny_price;
                $total_cny += $list[$k]['cny_balance'];
            }
        }
        // $cny_price = Currency::getCnyPrice();
        // $total = 
        return $this->success(['wallet' => $list, 'total_cny' => $total_cny]);
    }

    public function moneyRechange(Request $request)
    {
        // $company_eth_address = Setting::getValueByKey("company_eth_address");
        // return $this->success(array("company_eth_address"=>$company_eth_address));
        $user_id = Users::getUserId();
        $currency_id = $request->input('currency_id', '');
        if (empty($user_id) || empty($currency_id)) return $this->error('Parameter Error');
        $userWallet = UsersWallet::where('user_id', $user_id)->where('currency', $currency_id)->first();
        $company_eth_address = $userWallet->eth_address;
        return $this->success(array("company_eth_address" => $company_eth_address));
    }

    //Transfer Accounts
    public function walletChange(Request $request)
    {
        $user_id = Users::getUserId();
        $currency_id = $request->input('id', '');
        $num = $request->input('number', '');
        $address = $request->input('address', '');
        $remarks = $request->input('remarks', '');
        $password = $request->input('password', '');
        if (empty($currency_id) || empty($num) || empty($address) || empty($remarks) || empty($password)) {
            return $this->error('Parameter Error');
        }
        $user = Users::find($user_id);
        $wallet = UsersWallet::where('currency', $currency_id)->where('user_id', $user_id)->first();
        if ($num > $wallet->change_balance) return $this->error('Sorry, Your Credit Is Running Low');
        if ($num <= 0) return $this->error('Please Enter The Correct Value');
        $to_wallet =  UsersWallet::where('address', $address)->where('currency', $currency_id)->first();
        if (empty($to_wallet)) return $this->error('Wrong Address Input');
        if ($to_wallet->currency != $currency_id) return $this->error('Wrong Address Input1');
        if ($to_wallet->user_id == $user_id) return $this->error('You Cant Transfer Money To Yourself');
        if ($password != $user->pay_password) return $this->error('Payment Password Error');
        $to_user = Users::find($to_wallet->user_id);
        DB::beginTransaction();
        try {
            $data_wallet1 = [
                'balance_type' =>  2,
                'wallet_id' => $wallet->id,
                'lock_type' => 0,
                'create_time' => time(),
                'before' =>  $wallet->change_balance,
                'change' => -$num,
                'after' => bc_sub($wallet->change_balance, $num, 5),
            ];
            AccountLog::insertLog([
                'user_id' => $user_id,
                'value' => bc_mul($num, -1, 5),
                'info' => "Towards" . $to_user->account_number . "Transfer Accounts",
                'type' => AccountLog::CHANGEBALANCE,
                'currency' => $currency_id,
            ], $data_wallet1);
            $data_wallet2 = [
                'balance_type' =>  2,
                'wallet_id' => $to_wallet->id,
                'lock_type' => 0,
                'create_time' => time(),
                'before' =>  $to_wallet->change_balance,
                'change' => $num,
                'after' => bc_add($to_wallet->change_balance, $num, 5),
            ];
            AccountLog::insertLog([
                'user_id' => $to_wallet->user_id,
                'value' => bc_mul($num, 1, 5),
                'info' => "Come From" . $user->account_number . "Transfer Of Funds",
                'type' => AccountLog::CHANGEBALANCE,
                'currency' => $currency_id,
            ], $data_wallet2);
            $wallet->change_balance = bc_sub($wallet->change_balance, $num, 5);
            $wallet->save();
            $to_wallet->change_balance = bc_add($wallet->change_balance, $num, 5);
            $to_wallet->save();
            DB::commit();
            return $this->success('Transfer Successful');
        } catch (\Exception $rex) {
            DB::rollback();
            return $this->error($rex);
        }
    }

    public function accountList()
    {
        $user_id = Users::getUserId();
        $currency_id = request()->input('id', '');
        $limit = request()->input('limit', '12');
        $page = request()->input('page', '1');
        $data = AccountLog::where("user_id", $user_id);
        if (!empty($currency_id)) {
            $data = $data->where('currency', $currency_id);
        }
        $data = $data->orderBy('id', 'DESC')->paginate($limit);
        return $this->success(array(
            "user_id" => $user_id,
            "data" => $data->items(),
            "limit" => $limit,
            "page" => $page,
        ));
    }

    public function getInfo()
    {
        $user_id = Users::getUserId();
        return $this->success(Users::find($user_id));
    }
}
